import {
  _ as U,
  o as d,
  c as m,
  a as s,
  q as b,
  n as S,
  s as y,
  i as h,
  T as M,
  u as B,
  g as c,
  x as w,
  j as p,
  w as g,
  y as V,
  F as P,
  d as E,
  t as a,
  b as f,
  v as F,
  r as x,
  z as T,
  f as H,
  h as O,
  k as W,
  l as K,
} from "./plugin-vue_export-helper.min.js";
const R = {
    name: "Card",
    methods: {
      setTheme(e) {
        document.documentElement.setAttribute("data-theme", e),
          localStorage.setItem("theme", e);
      },
      toggleTheme() {
        document.documentElement.getAttribute("data-theme") === "dark"
          ? this.setTheme("winter")
          : this.setTheme("dark");
      },
    },
    mounted() {
      const e = localStorage.getItem("theme");
      e
        ? this.setTheme(e)
        : window.matchMedia &&
          window.matchMedia("(prefers-color-scheme: dark)").matches &&
          this.setTheme("dark");
    },
  },
  X = { class: "wpit-swap swap swap-rotate bg-base-100 p-2" };
function z(e, t, l, u, n, i) {
  return (
    d(),
    m(
      "div",
      {
        class: S([
          "card w-full p-6 bg-base-100 text-base-content shadow-xl",
          e.topMargin || "mt-9",
        ]),
      },
      [
        s("label", X, [
          s(
            "input",
            {
              type: "checkbox",
              class: "theme-controller",
              onChange:
                t[0] || (t[0] = (...o) => i.toggleTheme && i.toggleTheme(...o)),
            },
            null,
            32
          ),
          t[1] ||
            (t[1] = s("i", { class: "swap-off far fa-sun text-xl" }, null, -1)),
          t[2] ||
            (t[2] = s("i", { class: "swap-on far fa-moon text-xl" }, null, -1)),
        ]),
        s("div", null, [b(e.$slots, "default")]),
      ],
      2
    )
  );
}
var q = U(R, [["render", z]]);
function C(e) {
  return e === 0 ? !1 : Array.isArray(e) && e.length === 0 ? !0 : !e;
}
function J(e) {
  return (...t) => !e(...t);
}
function Y(e, t) {
  return (
    e === void 0 && (e = "undefined"),
    e === null && (e = "null"),
    e === !1 && (e = "false"),
    e.toString().toLowerCase().indexOf(t.trim()) !== -1
  );
}
function I(e, t, l, u) {
  return t
    ? e
        .filter((n) => Y(u(n, l), t))
        .sort((n, i) => u(n, l).length - u(i, l).length)
    : e;
}
function Z(e) {
  return e.filter((t) => !t.$isLabel);
}
function j(e, t) {
  return (l) =>
    l.reduce(
      (u, n) =>
        n[e] && n[e].length
          ? (u.push({ $groupLabel: n[t], $isLabel: !0 }), u.concat(n[e]))
          : u,
      []
    );
}
function Q(e, t, l, u, n) {
  return (i) =>
    i.map((o) => {
      if (!o[l])
        return (
          console.warn(
            "Options passed to vue-multiselect do not contain groups, despite the config."
          ),
          []
        );
      const v = I(o[l], e, t, n);
      return v.length ? { [u]: o[u], [l]: v } : [];
    });
}
const N =
  (...e) =>
  (t) =>
    e.reduce((l, u) => u(l), t);
var $ = {
    data() {
      return {
        search: "",
        isOpen: !1,
        preferredOpenDirection: "below",
        optimizedHeight: this.maxHeight,
      };
    },
    props: {
      internalSearch: { type: Boolean, default: !0 },
      options: { type: Array, required: !0 },
      multiple: { type: Boolean, default: !1 },
      trackBy: { type: String },
      label: { type: String },
      searchable: { type: Boolean, default: !0 },
      clearOnSelect: { type: Boolean, default: !0 },
      hideSelected: { type: Boolean, default: !1 },
      placeholder: { type: String, default: "Select option" },
      allowEmpty: { type: Boolean, default: !0 },
      resetAfter: { type: Boolean, default: !1 },
      closeOnSelect: { type: Boolean, default: !0 },
      customLabel: {
        type: Function,
        default(e, t) {
          return C(e) ? "" : t ? e[t] : e;
        },
      },
      taggable: { type: Boolean, default: !1 },
      tagPlaceholder: { type: String, default: "Press enter to create a tag" },
      tagPosition: { type: String, default: "top" },
      max: { type: [Number, Boolean], default: !1 },
      id: { default: null },
      optionsLimit: { type: Number, default: 1e3 },
      groupValues: { type: String },
      groupLabel: { type: String },
      groupSelect: { type: Boolean, default: !1 },
      blockKeys: {
        type: Array,
        default() {
          return [];
        },
      },
      preserveSearch: { type: Boolean, default: !1 },
      preselectFirst: { type: Boolean, default: !1 },
      preventAutofocus: { type: Boolean, default: !1 },
    },
    mounted() {
      !this.multiple &&
        this.max &&
        console.warn(
          "[Vue-Multiselect warn]: Max prop should not be used when prop Multiple equals false."
        ),
        this.preselectFirst &&
          !this.internalValue.length &&
          this.options.length &&
          this.select(this.filteredOptions[0]);
    },
    computed: {
      internalValue() {
        return this.modelValue || this.modelValue === 0
          ? Array.isArray(this.modelValue)
            ? this.modelValue
            : [this.modelValue]
          : [];
      },
      filteredOptions() {
        const e = this.search || "",
          t = e.toLowerCase().trim();
        let l = this.options.concat();
        return (
          this.internalSearch
            ? (l = this.groupValues
                ? this.filterAndFlat(l, t, this.label)
                : I(l, t, this.label, this.customLabel))
            : (l = this.groupValues
                ? j(this.groupValues, this.groupLabel)(l)
                : l),
          (l = this.hideSelected ? l.filter(J(this.isSelected)) : l),
          this.taggable &&
            t.length &&
            !this.isExistingOption(t) &&
            (this.tagPosition === "bottom"
              ? l.push({ isTag: !0, label: e })
              : l.unshift({ isTag: !0, label: e })),
          l.slice(0, this.optionsLimit)
        );
      },
      valueKeys() {
        return this.trackBy
          ? this.internalValue.map((e) => e[this.trackBy])
          : this.internalValue;
      },
      optionKeys() {
        return (
          this.groupValues ? this.flatAndStrip(this.options) : this.options
        ).map((t) => this.customLabel(t, this.label).toString().toLowerCase());
      },
      currentOptionLabel() {
        return this.multiple
          ? this.searchable
            ? ""
            : this.placeholder
          : this.internalValue.length
          ? this.getOptionLabel(this.internalValue[0])
          : this.searchable
          ? ""
          : this.placeholder;
      },
    },
    watch: {
      internalValue: {
        handler() {
          this.resetAfter &&
            this.internalValue.length &&
            ((this.search = ""),
            this.$emit("update:modelValue", this.multiple ? [] : null));
        },
        deep: !0,
      },
      search() {
        this.$emit("search-change", this.search);
      },
    },
    emits: [
      "open",
      "search-change",
      "close",
      "select",
      "update:modelValue",
      "remove",
      "tag",
    ],
    methods: {
      getValue() {
        return this.multiple
          ? this.internalValue
          : this.internalValue.length === 0
          ? null
          : this.internalValue[0];
      },
      filterAndFlat(e, t, l) {
        return N(
          Q(t, l, this.groupValues, this.groupLabel, this.customLabel),
          j(this.groupValues, this.groupLabel)
        )(e);
      },
      flatAndStrip(e) {
        return N(j(this.groupValues, this.groupLabel), Z)(e);
      },
      updateSearch(e) {
        this.search = e;
      },
      isExistingOption(e) {
        return this.options ? this.optionKeys.indexOf(e) > -1 : !1;
      },
      isSelected(e) {
        const t = this.trackBy ? e[this.trackBy] : e;
        return this.valueKeys.indexOf(t) > -1;
      },
      isOptionDisabled(e) {
        return !!e.$isDisabled;
      },
      getOptionLabel(e) {
        if (C(e)) return "";
        if (e.isTag) return e.label;
        if (e.$isLabel) return e.$groupLabel;
        const t = this.customLabel(e, this.label);
        return C(t) ? "" : t;
      },
      select(e, t) {
        if (e.$isLabel && this.groupSelect) {
          this.selectGroup(e);
          return;
        }
        if (
          !(
            this.blockKeys.indexOf(t) !== -1 ||
            this.disabled ||
            e.$isDisabled ||
            e.$isLabel
          ) &&
          !(
            this.max &&
            this.multiple &&
            this.internalValue.length === this.max
          ) &&
          !(t === "Tab" && !this.pointerDirty)
        ) {
          if (e.isTag)
            this.$emit("tag", e.label, this.id),
              (this.search = ""),
              this.closeOnSelect && !this.multiple && this.deactivate();
          else {
            if (this.isSelected(e)) {
              t !== "Tab" && this.removeElement(e);
              return;
            }
            this.multiple
              ? this.$emit("update:modelValue", this.internalValue.concat([e]))
              : this.$emit("update:modelValue", e),
              this.$emit("select", e, this.id),
              this.clearOnSelect && (this.search = "");
          }
          this.closeOnSelect && this.deactivate();
        }
      },
      selectGroup(e) {
        const t = this.options.find(
          (l) => l[this.groupLabel] === e.$groupLabel
        );
        if (!!t) {
          if (this.wholeGroupSelected(t)) {
            this.$emit("remove", t[this.groupValues], this.id);
            const l = this.trackBy
                ? t[this.groupValues].map((n) => n[this.trackBy])
                : t[this.groupValues],
              u = this.internalValue.filter(
                (n) => l.indexOf(this.trackBy ? n[this.trackBy] : n) === -1
              );
            this.$emit("update:modelValue", u);
          } else {
            let l = t[this.groupValues].filter(
              (u) => !(this.isOptionDisabled(u) || this.isSelected(u))
            );
            this.max && l.splice(this.max - this.internalValue.length),
              this.$emit("select", l, this.id),
              this.$emit("update:modelValue", this.internalValue.concat(l));
          }
          this.closeOnSelect && this.deactivate();
        }
      },
      wholeGroupSelected(e) {
        return e[this.groupValues].every(
          (t) => this.isSelected(t) || this.isOptionDisabled(t)
        );
      },
      wholeGroupDisabled(e) {
        return e[this.groupValues].every(this.isOptionDisabled);
      },
      removeElement(e, t = !0) {
        if (this.disabled || e.$isDisabled) return;
        if (!this.allowEmpty && this.internalValue.length <= 1) {
          this.deactivate();
          return;
        }
        const l =
          typeof e == "object"
            ? this.valueKeys.indexOf(e[this.trackBy])
            : this.valueKeys.indexOf(e);
        if (this.multiple) {
          const u = this.internalValue
            .slice(0, l)
            .concat(this.internalValue.slice(l + 1));
          this.$emit("update:modelValue", u);
        } else this.$emit("update:modelValue", null);
        this.$emit("remove", e, this.id),
          this.closeOnSelect && t && this.deactivate();
      },
      removeLastElement() {
        this.blockKeys.indexOf("Delete") === -1 &&
          this.search.length === 0 &&
          Array.isArray(this.internalValue) &&
          this.internalValue.length &&
          this.removeElement(
            this.internalValue[this.internalValue.length - 1],
            !1
          );
      },
      activate() {
        this.isOpen ||
          this.disabled ||
          (this.adjustPosition(),
          this.groupValues &&
            this.pointer === 0 &&
            this.filteredOptions.length &&
            (this.pointer = 1),
          (this.isOpen = !0),
          this.searchable
            ? (this.preserveSearch || (this.search = ""),
              this.preventAutofocus ||
                this.$nextTick(
                  () => this.$refs.search && this.$refs.search.focus()
                ))
            : this.preventAutofocus ||
              (typeof this.$el != "undefined" && this.$el.focus()),
          this.$emit("open", this.id));
      },
      deactivate() {
        !this.isOpen ||
          ((this.isOpen = !1),
          this.searchable
            ? this.$refs.search !== null &&
              typeof this.$refs.search != "undefined" &&
              this.$refs.search.blur()
            : typeof this.$el != "undefined" && this.$el.blur(),
          this.preserveSearch || (this.search = ""),
          this.$emit("close", this.getValue(), this.id));
      },
      toggle() {
        this.isOpen ? this.deactivate() : this.activate();
      },
      adjustPosition() {
        if (typeof window == "undefined") return;
        const e = this.$el.getBoundingClientRect().top,
          t = window.innerHeight - this.$el.getBoundingClientRect().bottom;
        t > this.maxHeight ||
        t > e ||
        this.openDirection === "below" ||
        this.openDirection === "bottom"
          ? ((this.preferredOpenDirection = "below"),
            (this.optimizedHeight = Math.min(t - 40, this.maxHeight)))
          : ((this.preferredOpenDirection = "above"),
            (this.optimizedHeight = Math.min(e - 40, this.maxHeight)));
      },
    },
  },
  ee = {
    data() {
      return { pointer: 0, pointerDirty: !1 };
    },
    props: {
      showPointer: { type: Boolean, default: !0 },
      optionHeight: { type: Number, default: 40 },
    },
    computed: {
      pointerPosition() {
        return this.pointer * this.optionHeight;
      },
      visibleElements() {
        return this.optimizedHeight / this.optionHeight;
      },
    },
    watch: {
      filteredOptions() {
        this.pointerAdjust();
      },
      isOpen() {
        this.pointerDirty = !1;
      },
      pointer() {
        this.$refs.search &&
          this.$refs.search.setAttribute(
            "aria-activedescendant",
            this.id + "-" + this.pointer.toString()
          );
      },
    },
    methods: {
      optionHighlight(e, t) {
        return {
          "multiselect__option--highlight":
            e === this.pointer && this.showPointer,
          "multiselect__option--selected": this.isSelected(t),
        };
      },
      groupHighlight(e, t) {
        if (!this.groupSelect)
          return [
            "multiselect__option--disabled",
            { "multiselect__option--group": t.$isLabel },
          ];
        const l = this.options.find(
          (u) => u[this.groupLabel] === t.$groupLabel
        );
        return l && !this.wholeGroupDisabled(l)
          ? [
              "multiselect__option--group",
              {
                "multiselect__option--highlight":
                  e === this.pointer && this.showPointer,
              },
              {
                "multiselect__option--group-selected":
                  this.wholeGroupSelected(l),
              },
            ]
          : "multiselect__option--disabled";
      },
      addPointerElement({ key: e } = "Enter") {
        this.filteredOptions.length > 0 &&
          this.select(this.filteredOptions[this.pointer], e),
          this.pointerReset();
      },
      pointerForward() {
        this.pointer < this.filteredOptions.length - 1 &&
          (this.pointer++,
          this.$refs.list.scrollTop <=
            this.pointerPosition -
              (this.visibleElements - 1) * this.optionHeight &&
            (this.$refs.list.scrollTop =
              this.pointerPosition -
              (this.visibleElements - 1) * this.optionHeight),
          this.filteredOptions[this.pointer] &&
            this.filteredOptions[this.pointer].$isLabel &&
            !this.groupSelect &&
            this.pointerForward()),
          (this.pointerDirty = !0);
      },
      pointerBackward() {
        this.pointer > 0
          ? (this.pointer--,
            this.$refs.list.scrollTop >= this.pointerPosition &&
              (this.$refs.list.scrollTop = this.pointerPosition),
            this.filteredOptions[this.pointer] &&
              this.filteredOptions[this.pointer].$isLabel &&
              !this.groupSelect &&
              this.pointerBackward())
          : this.filteredOptions[this.pointer] &&
            this.filteredOptions[0].$isLabel &&
            !this.groupSelect &&
            this.pointerForward(),
          (this.pointerDirty = !0);
      },
      pointerReset() {
        !this.closeOnSelect ||
          ((this.pointer = 0),
          this.$refs.list && (this.$refs.list.scrollTop = 0));
      },
      pointerAdjust() {
        this.pointer >= this.filteredOptions.length - 1 &&
          (this.pointer = this.filteredOptions.length
            ? this.filteredOptions.length - 1
            : 0),
          this.filteredOptions.length > 0 &&
            this.filteredOptions[this.pointer].$isLabel &&
            !this.groupSelect &&
            this.pointerForward();
      },
      pointerSet(e) {
        (this.pointer = e), (this.pointerDirty = !0);
      },
    },
  },
  G = {
    name: "vue-multiselect",
    mixins: [$, ee],
    compatConfig: { MODE: 3, ATTR_ENUMERATED_COERCION: !1 },
    props: {
      name: { type: String, default: "" },
      modelValue: {
        type: null,
        default() {
          return [];
        },
      },
      selectLabel: { type: String, default: "Press enter to select" },
      selectGroupLabel: {
        type: String,
        default: "Press enter to select group",
      },
      selectedLabel: { type: String, default: "Selected" },
      deselectLabel: { type: String, default: "Press enter to remove" },
      deselectGroupLabel: {
        type: String,
        default: "Press enter to deselect group",
      },
      showLabels: { type: Boolean, default: !0 },
      limit: { type: Number, default: 99999 },
      maxHeight: { type: Number, default: 300 },
      limitText: { type: Function, default: (e) => `and ${e} more` },
      loading: { type: Boolean, default: !1 },
      disabled: { type: Boolean, default: !1 },
      spellcheck: { type: Boolean, default: !1 },
      openDirection: { type: String, default: "" },
      showNoOptions: { type: Boolean, default: !0 },
      showNoResults: { type: Boolean, default: !0 },
      tabindex: { type: Number, default: 0 },
      required: { type: Boolean, default: !1 },
    },
    computed: {
      hasOptionGroup() {
        return this.groupValues && this.groupLabel && this.groupSelect;
      },
      isSingleLabelVisible() {
        return (
          (this.singleValue || this.singleValue === 0) &&
          (!this.isOpen || !this.searchable) &&
          !this.visibleValues.length
        );
      },
      isPlaceholderVisible() {
        return !this.internalValue.length && (!this.searchable || !this.isOpen);
      },
      visibleValues() {
        return this.multiple ? this.internalValue.slice(0, this.limit) : [];
      },
      singleValue() {
        return this.internalValue[0];
      },
      deselectLabelText() {
        return this.showLabels ? this.deselectLabel : "";
      },
      deselectGroupLabelText() {
        return this.showLabels ? this.deselectGroupLabel : "";
      },
      selectLabelText() {
        return this.showLabels ? this.selectLabel : "";
      },
      selectGroupLabelText() {
        return this.showLabels ? this.selectGroupLabel : "";
      },
      selectedLabelText() {
        return this.showLabels ? this.selectedLabel : "";
      },
      inputStyle() {
        return this.searchable ||
          (this.multiple && this.modelValue && this.modelValue.length)
          ? this.isOpen
            ? { width: "100%" }
            : { width: "0", position: "absolute", padding: "0" }
          : "";
      },
      contentStyle() {
        return this.options.length
          ? { display: "inline-block" }
          : { display: "block" };
      },
      isAbove() {
        return this.openDirection === "above" || this.openDirection === "top"
          ? !0
          : this.openDirection === "below" || this.openDirection === "bottom"
          ? !1
          : this.preferredOpenDirection === "above";
      },
      showSearchInput() {
        return (
          this.searchable &&
          (this.hasSingleSelectedSlot &&
          (this.visibleSingleValue || this.visibleSingleValue === 0)
            ? this.isOpen
            : !0)
        );
      },
    },
  };
const te = { ref: "tags", class: "multiselect__tags" },
  se = { class: "multiselect__tags-wrap" },
  ie = { class: "multiselect__spinner" },
  le = { key: 0 },
  ne = { class: "multiselect__option" },
  re = { class: "multiselect__option" },
  ae = f("No elements found. Consider changing the search query."),
  oe = { class: "multiselect__option" },
  ue = f("List is empty.");
function de(e, t, l, u, n, i) {
  return (
    d(),
    y(
      "div",
      {
        tabindex: e.searchable ? -1 : l.tabindex,
        class: [
          {
            "multiselect--active": e.isOpen,
            "multiselect--disabled": l.disabled,
            "multiselect--above": i.isAbove,
            "multiselect--has-options-group": i.hasOptionGroup,
          },
          "multiselect",
        ],
        onFocus: t[14] || (t[14] = (o) => e.activate()),
        onBlur: t[15] || (t[15] = (o) => (e.searchable ? !1 : e.deactivate())),
        onKeydown: [
          t[16] ||
            (t[16] = w(
              c((o) => e.pointerForward(), ["self", "prevent"]),
              ["down"]
            )),
          t[17] ||
            (t[17] = w(
              c((o) => e.pointerBackward(), ["self", "prevent"]),
              ["up"]
            )),
        ],
        onKeypress:
          t[18] ||
          (t[18] = w(
            c((o) => e.addPointerElement(o), ["stop", "self"]),
            ["enter", "tab"]
          )),
        onKeyup: t[19] || (t[19] = w((o) => e.deactivate(), ["esc"])),
        role: "combobox",
        "aria-owns": "listbox-" + e.id,
      },
      [
        b(e.$slots, "caret", { toggle: e.toggle }, () => [
          h(
            "div",
            {
              onMousedown:
                t[1] || (t[1] = c((o) => e.toggle(), ["prevent", "stop"])),
              class: "multiselect__select",
            },
            null,
            32
          ),
        ]),
        b(e.$slots, "clear", { search: e.search }),
        h(
          "div",
          te,
          [
            b(
              e.$slots,
              "selection",
              {
                search: e.search,
                remove: e.removeElement,
                values: i.visibleValues,
                isOpen: e.isOpen,
              },
              () => [
                g(
                  h(
                    "div",
                    se,
                    [
                      (d(!0),
                      y(
                        P,
                        null,
                        E(i.visibleValues, (o, v) =>
                          b(
                            e.$slots,
                            "tag",
                            {
                              option: o,
                              search: e.search,
                              remove: e.removeElement,
                            },
                            () => [
                              (d(),
                              y("span", { class: "multiselect__tag", key: v }, [
                                h(
                                  "span",
                                  { textContent: a(e.getOptionLabel(o)) },
                                  null,
                                  8,
                                  ["textContent"]
                                ),
                                h(
                                  "i",
                                  {
                                    tabindex: "1",
                                    onKeypress: w(
                                      c((k) => e.removeElement(o), ["prevent"]),
                                      ["enter"]
                                    ),
                                    onMousedown: c(
                                      (k) => e.removeElement(o),
                                      ["prevent"]
                                    ),
                                    class: "multiselect__tag-icon",
                                  },
                                  null,
                                  40,
                                  ["onKeypress", "onMousedown"]
                                ),
                              ])),
                            ]
                          )
                        ),
                        256
                      )),
                    ],
                    512
                  ),
                  [[V, i.visibleValues.length > 0]]
                ),
                e.internalValue && e.internalValue.length > l.limit
                  ? b(e.$slots, "limit", { key: 0 }, () => [
                      h(
                        "strong",
                        {
                          class: "multiselect__strong",
                          textContent: a(
                            l.limitText(e.internalValue.length - l.limit)
                          ),
                        },
                        null,
                        8,
                        ["textContent"]
                      ),
                    ])
                  : p("v-if", !0),
              ]
            ),
            h(
              M,
              { name: "multiselect__loading" },
              {
                default: B(() => [
                  b(e.$slots, "loading", {}, () => [
                    g(h("div", ie, null, 512), [[V, l.loading]]),
                  ]),
                ]),
                _: 3,
              }
            ),
            e.searchable
              ? (d(),
                y(
                  "input",
                  {
                    key: 0,
                    ref: "search",
                    name: l.name,
                    id: e.id,
                    type: "text",
                    autocomplete: "off",
                    spellcheck: l.spellcheck,
                    placeholder: e.placeholder,
                    required: l.required,
                    style: i.inputStyle,
                    value: e.search,
                    disabled: l.disabled,
                    tabindex: l.tabindex,
                    onInput:
                      t[2] || (t[2] = (o) => e.updateSearch(o.target.value)),
                    onFocus:
                      t[3] || (t[3] = c((o) => e.activate(), ["prevent"])),
                    onBlur:
                      t[4] || (t[4] = c((o) => e.deactivate(), ["prevent"])),
                    onKeyup: t[5] || (t[5] = w((o) => e.deactivate(), ["esc"])),
                    onKeydown: [
                      t[6] ||
                        (t[6] = w(
                          c((o) => e.pointerForward(), ["prevent"]),
                          ["down"]
                        )),
                      t[7] ||
                        (t[7] = w(
                          c((o) => e.pointerBackward(), ["prevent"]),
                          ["up"]
                        )),
                      t[9] ||
                        (t[9] = w(
                          c((o) => e.removeLastElement(), ["stop"]),
                          ["delete"]
                        )),
                    ],
                    onKeypress:
                      t[8] ||
                      (t[8] = w(
                        c(
                          (o) => e.addPointerElement(o),
                          ["prevent", "stop", "self"]
                        ),
                        ["enter"]
                      )),
                    class: "multiselect__input",
                    "aria-controls": "listbox-" + e.id,
                  },
                  null,
                  44,
                  [
                    "name",
                    "id",
                    "spellcheck",
                    "placeholder",
                    "required",
                    "value",
                    "disabled",
                    "tabindex",
                    "aria-controls",
                  ]
                ))
              : p("v-if", !0),
            i.isSingleLabelVisible
              ? (d(),
                y(
                  "span",
                  {
                    key: 1,
                    class: "multiselect__single",
                    onMousedown:
                      t[10] ||
                      (t[10] = c(
                        (...o) => e.toggle && e.toggle(...o),
                        ["prevent"]
                      )),
                  },
                  [
                    b(
                      e.$slots,
                      "singleLabel",
                      { option: i.singleValue },
                      () => [f(a(e.currentOptionLabel), 1)]
                    ),
                  ],
                  32
                ))
              : p("v-if", !0),
            i.isPlaceholderVisible
              ? (d(),
                y(
                  "span",
                  {
                    key: 2,
                    class: "multiselect__placeholder",
                    onMousedown:
                      t[11] ||
                      (t[11] = c(
                        (...o) => e.toggle && e.toggle(...o),
                        ["prevent"]
                      )),
                  },
                  [
                    b(e.$slots, "placeholder", {}, () => [
                      f(a(e.placeholder), 1),
                    ]),
                  ],
                  32
                ))
              : p("v-if", !0),
          ],
          512
        ),
        h(
          M,
          { name: "multiselect" },
          {
            default: B(() => [
              g(
                h(
                  "div",
                  {
                    class: "multiselect__content-wrapper",
                    onFocus:
                      t[12] ||
                      (t[12] = (...o) => e.activate && e.activate(...o)),
                    tabindex: "-1",
                    onMousedown: t[13] || (t[13] = c(() => {}, ["prevent"])),
                    style: { maxHeight: e.optimizedHeight + "px" },
                    ref: "list",
                  },
                  [
                    h(
                      "ul",
                      {
                        class: "multiselect__content",
                        style: i.contentStyle,
                        role: "listbox",
                        id: "listbox-" + e.id,
                        "aria-multiselectable": e.multiple,
                      },
                      [
                        b(e.$slots, "beforeList"),
                        e.multiple && e.max === e.internalValue.length
                          ? (d(),
                            y("li", le, [
                              h("span", ne, [
                                b(e.$slots, "maxElements", {}, () => [
                                  f(
                                    "Maximum of " +
                                      a(e.max) +
                                      " options selected. First remove a selected option to select another.",
                                    1
                                  ),
                                ]),
                              ]),
                            ]))
                          : p("v-if", !0),
                        !e.max || e.internalValue.length < e.max
                          ? (d(!0),
                            y(
                              P,
                              { key: 1 },
                              E(
                                e.filteredOptions,
                                (o, v) => (
                                  d(),
                                  y(
                                    "li",
                                    {
                                      class: "multiselect__element",
                                      key: v,
                                      "aria-selected": e.isSelected(o),
                                      id: e.id + "-" + v,
                                      role:
                                        o && (o.$isLabel || o.$isDisabled)
                                          ? null
                                          : "option",
                                    },
                                    [
                                      o && (o.$isLabel || o.$isDisabled)
                                        ? p("v-if", !0)
                                        : (d(),
                                          y(
                                            "span",
                                            {
                                              key: 0,
                                              class: [
                                                e.optionHighlight(v, o),
                                                "multiselect__option",
                                              ],
                                              onClick: c(
                                                (k) => e.select(o),
                                                ["stop"]
                                              ),
                                              onMouseenter: c(
                                                (k) => e.pointerSet(v),
                                                ["self"]
                                              ),
                                              "data-select":
                                                o && o.isTag
                                                  ? e.tagPlaceholder
                                                  : i.selectLabelText,
                                              "data-selected":
                                                i.selectedLabelText,
                                              "data-deselect":
                                                i.deselectLabelText,
                                            },
                                            [
                                              b(
                                                e.$slots,
                                                "option",
                                                {
                                                  option: o,
                                                  search: e.search,
                                                  index: v,
                                                },
                                                () => [
                                                  h(
                                                    "span",
                                                    null,
                                                    a(e.getOptionLabel(o)),
                                                    1
                                                  ),
                                                ]
                                              ),
                                            ],
                                            42,
                                            [
                                              "onClick",
                                              "onMouseenter",
                                              "data-select",
                                              "data-selected",
                                              "data-deselect",
                                            ]
                                          )),
                                      o && (o.$isLabel || o.$isDisabled)
                                        ? (d(),
                                          y(
                                            "span",
                                            {
                                              key: 1,
                                              "data-select":
                                                e.groupSelect &&
                                                i.selectGroupLabelText,
                                              "data-deselect":
                                                e.groupSelect &&
                                                i.deselectGroupLabelText,
                                              class: [
                                                e.groupHighlight(v, o),
                                                "multiselect__option",
                                              ],
                                              onMouseenter: c(
                                                (k) =>
                                                  e.groupSelect &&
                                                  e.pointerSet(v),
                                                ["self"]
                                              ),
                                              onMousedown: c(
                                                (k) => e.selectGroup(o),
                                                ["prevent"]
                                              ),
                                            },
                                            [
                                              b(
                                                e.$slots,
                                                "option",
                                                {
                                                  option: o,
                                                  search: e.search,
                                                  index: v,
                                                },
                                                () => [
                                                  h(
                                                    "span",
                                                    null,
                                                    a(e.getOptionLabel(o)),
                                                    1
                                                  ),
                                                ]
                                              ),
                                            ],
                                            42,
                                            [
                                              "data-select",
                                              "data-deselect",
                                              "onMouseenter",
                                              "onMousedown",
                                            ]
                                          ))
                                        : p("v-if", !0),
                                    ],
                                    8,
                                    ["aria-selected", "id", "role"]
                                  )
                                )
                              ),
                              128
                            ))
                          : p("v-if", !0),
                        g(
                          h(
                            "li",
                            null,
                            [
                              h("span", re, [
                                b(
                                  e.$slots,
                                  "noResult",
                                  { search: e.search },
                                  () => [ae]
                                ),
                              ]),
                            ],
                            512
                          ),
                          [
                            [
                              V,
                              l.showNoResults &&
                                e.filteredOptions.length === 0 &&
                                e.search &&
                                !l.loading,
                            ],
                          ]
                        ),
                        g(
                          h(
                            "li",
                            null,
                            [
                              h("span", oe, [
                                b(e.$slots, "noOptions", {}, () => [ue]),
                              ]),
                            ],
                            512
                          ),
                          [
                            [
                              V,
                              l.showNoOptions &&
                                (e.options.length === 0 ||
                                  (i.hasOptionGroup === !0 &&
                                    e.filteredOptions.length === 0)) &&
                                !e.search &&
                                !l.loading,
                            ],
                          ]
                        ),
                        b(e.$slots, "afterList"),
                      ],
                      12,
                      ["id", "aria-multiselectable"]
                    ),
                  ],
                  36
                ),
                [[V, e.isOpen]]
              ),
            ]),
            _: 3,
          }
        ),
      ],
      42,
      ["tabindex", "aria-owns"]
    )
  );
}
G.render = de;
const he = {
    name: "Settings",
    components: { Card: q, VueEditor: F.exports.VueEditor, Multiselect: G },
    data() {
      return {
        loading: !1,
        showPrioritesModal: !1,
        priorities: [],
        editingPriority: !1,
        selectedTab: 1,
        priorityForm: { id: null, name: "" },
        generalSettings: {
          activatePlugin: !0,
          defaultStatus: "",
          clientChangeStatus: !1,
          clientDeleteTicket: !1,
          maintenanceMode: !1,
        },
        emailSettings: {
          adminNotifications: !0,
          userNotifications: !0,
          useCustomEmail: !1,
          notificationEmail: "",
          adminSubject: "Notification pour Administrateur",
          adminBody: "D\xE9tail du ticket pour l'administrateur.",
          userSubject: "Notification pour Utilisateur",
          userBody: "D\xE9tail du ticket pour l'utilisateur.",
        },
        roles: [],
        selectedUsers: [],
        allUsers: [],
        toast: {
          visible: !1,
          message: "",
          type: "alert-success",
          position: "toast-bottom toast-end",
        },
        toolbarOptions: [
          ["bold", "italic", "underline", "strike"],
          ["link"],
          [{ list: "ordered" }, { list: "bullet" }],
          [{ header: [1, 2, 3, 4, 5, 6, !1] }],
          [{ color: [] }, { background: [] }],
          [{ align: [] }],
          [{ align: "right" }, { align: "center" }, { align: "justify" }],
          ["clean"],
          ["html"],
        ],
      };
    },
    computed: {
      translations() {
        return window.WPIT_Admin.WPIT_trans;
      },
    },
    beforeUnmount() {
      window.removeEventListener("hashchange", this.checkHash);
    },
    mounted() {
      this.checkHash(),
        window.addEventListener("hashchange", this.checkHash),
        this.fetchSettings(),
        this.fetchPriorities(),
        this.fetchUserRoles(),
        this.fetchAllUsers(),
        this.fetchTeamUsers();
    },
    methods: {
      selectTab(e) {
        (this.selectedTab = e), (window.location.hash = `tab${e}`);
      },
      tabClass(e) {
        return this.selectedTab === e ? "tab tab-active" : "tab";
      },
      checkHash() {
        const e = window.location.hash;
        if (e) {
          const t = parseInt(e.replace("#tab", ""));
          isNaN(t) || (this.selectedTab = t);
        }
      },
      async fetchSettings() {
        this.loading = !0;
        try {
          const e = await fetch("/wp-json/wbugboard/v1/settings", {
            method: "GET",
            headers: { "X-WP-Nonce": WPIT_Admin.nonce },
          });
          if (!e.ok)
            throw new Error(
              "Erreur lors de la r\xE9cup\xE9ration des param\xE8tres."
            );
          const t = await e.json();
          (this.generalSettings = t.settings.general || this.generalSettings),
            (this.emailSettings = t.settings.email || this.emailSettings),
            this.showToast(
              "Param\xE8tres charg\xE9s avec succ\xE8s",
              "alert-success"
            );
        } catch (e) {
          console.error(
            "Erreur lors de la r\xE9cup\xE9ration des param\xE8tres:",
            e
          ),
            this.showToast(
              "Erreur lors de la r\xE9cup\xE9ration des param\xE8tres",
              "alert-error"
            );
        } finally {
          this.loading = !1;
        }
      },
      fetchPriorities() {
        fetch("/wp-json/wbugboard/v1/priorities", {
          method: "GET",
          headers: { "X-WP-Nonce": WPIT_Admin.nonce },
        })
          .then((e) => e.json())
          .then((e) => {
            this.priorities = e;
          })
          .catch((e) =>
            console.error(
              "Erreur lors de la r\xE9cup\xE9ration des priorit\xE9s:",
              e
            )
          );
      },
      addPriority() {
        (this.priorityForm = { id: null, name: "" }),
          (this.editingPriority = !1),
          (this.showPrioritesModal = !0),
          this.$nextTick(() => {
            document.getElementById("modal_priorities").showModal();
          });
      },
      editPriority(e) {
        const t = this.priorities.find((l) => l.id === e);
        (this.priorityForm = { ...t }),
          (this.editingPriority = !0),
          (this.showPrioritesModal = !0),
          this.$nextTick(() => {
            document.getElementById("modal_priorities").showModal();
          });
      },
      async deletePriority(e) {
        try {
          const t = await fetch(`/wp-json/wbugboard/v1/priorities/${e}`, {
            method: "DELETE",
            headers: {
              "Content-Type": "application/json",
              "X-WP-Nonce": WPIT_Admin.nonce,
            },
          });
          if (t.ok)
            (this.priorities = this.priorities.filter((l) => l.id !== e)),
              this.showToast(
                "Priorit\xE9 supprim\xE9e avec succ\xE8s",
                "alert-success"
              );
          else {
            const l = await t.json();
            this.showToast(l.message, "alert-error");
          }
        } catch (t) {
          this.showToast(t.message, "alert-error");
        }
      },
      async savePriority() {
        const e = this.editingPriority ? "PUT" : "POST",
          t = this.editingPriority
            ? `/wp-json/wbugboard/v1/priorities/${this.priorityForm.id}`
            : "/wp-json/wbugboard/v1/priorities";
        try {
          const l = await fetch(t, {
            method: e,
            headers: {
              "Content-Type": "application/json",
              "X-WP-Nonce": WPIT_Admin.nonce,
            },
            body: JSON.stringify(this.priorityForm),
          });
          if (l.ok) {
            const u = await l.json();
            if (this.editingPriority) {
              const n = this.priorities.findIndex((i) => i.id === u.id);
              this.priorities.splice(n, 1, u);
            } else this.priorities.push(u);
            this.showToast(
              `Priorit\xE9 ${
                this.editingPriority ? "modifi\xE9e" : "ajout\xE9e"
              } avec succ\xE8s`,
              "alert-success"
            ),
              this.closePriorityModal();
          } else {
            const u = await l.json();
            this.showToast(u.message, "alert-error");
          }
        } catch (l) {
          this.showToast(l.message, "alert-error");
        }
      },
      closePriorityModal() {
        this.showPrioritesModal = !1;
      },
      fetchUserRoles() {
        (this.loading = !0),
          fetch("/wp-json/wbugboard/v1/roles-access", {
            method: "GET",
            headers: { "X-WP-Nonce": WPIT_Admin.nonce },
          })
            .then((e) => e.json())
            .then((e) => {
              (this.roles = e.roles), (this.loading = !1);
            })
            .catch((e) => {
              console.error(
                "Erreur lors de la r\xE9cup\xE9ration des r\xF4les:",
                e
              ),
                (this.loading = !1);
            });
      },
      toggleRoleAccess(e) {
        const t = this.roles.find((l) => l.name === e);
        t.hasAccess = !t.hasAccess;
      },
      saveUsersSettings() {
        const e = this.roles.filter((t) => t.hasAccess).map((t) => t.name);
        fetch("/wp-json/wbugboard/v1/update-users-settings", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "X-WP-Nonce": WPIT_Admin.nonce,
          },
          body: JSON.stringify({
            roles: e,
            users: this.selectedUsers.map((t) => t.id),
          }),
        })
          .then((t) => t.json())
          .then((t) => {
            t.success
              ? this.showToast(
                  "Les param\xE8tres ont \xE9t\xE9 sauvegard\xE9s avec succ\xE8s",
                  "alert-success"
                )
              : this.showToast("Erreur lors de la sauvegarde", "alert-error");
          })
          .catch((t) => {
            console.error("Erreur lors de la sauvegarde des param\xE8tres:", t),
              this.showToast("Erreur lors de la sauvegarde", "alert-error");
          });
      },
      async saveGeneralSettings() {
        try {
          const e = await fetch("/wp-json/wbugboard/v1/settings/general", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
                "X-WP-Nonce": WPIT_Admin.nonce,
              },
              body: JSON.stringify(this.generalSettings),
            }),
            t = await e.json();
          e.ok
            ? this.showToast(
                "Param\xE8tres g\xE9n\xE9raux enregistr\xE9s avec succ\xE8s",
                "alert-success"
              )
            : this.showToast(
                t.message ||
                  "Erreur lors de l'enregistrement des param\xE8tres",
                "alert-error"
              );
        } catch {
          this.showToast(
            "Erreur lors de l'enregistrement des param\xE8tres",
            "alert-error"
          );
        }
      },
      async saveEmailSettings() {
        try {
          const e = await fetch("/wp-json/wbugboard/v1/settings/email", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
                "X-WP-Nonce": WPIT_Admin.nonce,
              },
              body: JSON.stringify(this.emailSettings),
            }),
            t = await e.json();
          e.ok
            ? this.showToast(
                "Param\xE8tres d'email enregistr\xE9s avec succ\xE8s",
                "alert-success"
              )
            : this.showToast(
                t.message ||
                  "Erreur lors de l'enregistrement des param\xE8tres",
                "alert-error"
              );
        } catch {
          this.showToast(
            "Erreur lors de l'enregistrement des param\xE8tres",
            "alert-error"
          );
        }
      },
      async fetchAllUsers() {
        try {
          const e = await fetch("/wp-json/wbugboard/v1/all-users", {
            method: "GET",
            headers: { "X-WP-Nonce": WPIT_Admin.nonce },
          });
          if (!e.ok)
            throw new Error(
              "Erreur lors de la r\xE9cup\xE9ration des utilisateurs."
            );
          const t = await e.json();
          this.allUsers = t.map((l) => ({ id: l.value, name: l.text }));
        } catch (e) {
          console.error(
            "Erreur lors de la r\xE9cup\xE9ration des utilisateurs :",
            e
          );
        }
      },
      async fetchTeamUsers() {
        try {
          const e = await fetch("/wp-json/wbugboard/v1/team-users", {
            method: "GET",
            headers: { "X-WP-Nonce": WPIT_Admin.nonce },
          });
          if (!e.ok)
            throw new Error(
              "Erreur lors de la r\xE9cup\xE9ration des utilisateurs s\xE9lectionn\xE9s."
            );
          const t = await e.json();
          this.selectedUsers = t.users.map((l) => ({ id: l.id, name: l.name }));
        } catch (e) {
          console.error(
            "Erreur lors de la r\xE9cup\xE9ration des utilisateurs s\xE9lectionn\xE9s :",
            e
          );
        }
      },
      showToast(e, t) {
        (this.toast.message = e),
          (this.toast.type = t),
          (this.toast.visible = !0),
          setTimeout(() => {
            this.toast.visible = !1;
          }, 3e3);
      },
    },
  },
  ce = { class: "pt-2 pr-4" },
  pe = { class: "flex justify-between items-center" },
  me = { class: "card-title" },
  fe = {
    class:
      "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4",
  },
  ge = { class: "tabs tabs-vertical tabs-boxed col-span-1" },
  be = {
    class: "col-span-3 p-4 bg-base-300 rounded-lg shadow-md content-tabs",
  },
  ve = {
    key: 0,
    class:
      "fixed top-0 left-0 w-full h-full flex items-center justify-center bg-gray-900 bg-opacity-50 z-50",
  },
  ye = { key: 1 },
  we = { class: "text-xl font-semibold mb-4" },
  Se = { class: "wpit-group mb-4" },
  ke = { class: "wpit-group mb-4" },
  Te = { class: "wpit-group mb-4" },
  Ve = { class: "wpit-group mb-4" },
  Oe = { class: "wpit-group form-control mb-4" },
  Pe = { class: "wpit-label label" },
  Ee = { value: "new" },
  _e = { value: "waiting" },
  Le = { value: "in_progress" },
  xe = { value: "resolved" },
  Ce = { value: "closed" },
  je = { class: "flex justify-end mt-4" },
  Be = { key: 2 },
  Ae = { class: "text-xl font-semibold mb-4" },
  Me = { class: "wpit-group mb-4" },
  Ne = { class: "wpit-group mb-4" },
  De = { class: "flex justify-end mt-4" },
  Ue = { key: 3 },
  Ie = { class: "text-lg font-semibold mb-4" },
  Ge = { class: "wpit-group mb-4" },
  Fe = { key: 0, class: "wpit-group form-control mb-4" },
  He = { class: "wpit-label label" },
  We = { class: "wpit-group form-control mb-4" },
  Ke = { class: "wpit-label label" },
  Re = { class: "form-control mb-4" },
  Xe = { class: "wpit-label label" },
  ze = { class: "flex justify-end mt-4" },
  qe = { key: 4 },
  Je = { class: "text-lg font-semibold mb-4" },
  Ye = { class: "wpit-group form-control mb-4" },
  Ze = { class: "wpit-label label" },
  Qe = { class: "form-control mb-4" },
  $e = { class: "wpit-label label" },
  et = { class: "flex justify-end mt-4" },
  tt = { key: 5 },
  st = { class: "text-xl font-semibold mb-4" },
  it = { key: 0, id: "modal_priorities", class: "modal" },
  lt = { class: "modal-box" },
  nt = { class: "text-xl font-semibold mb-4" },
  rt = { class: "flex wpit-group form-group mb-4" },
  at = { class: "wpit-label label", for: "name_priority" },
  ot = { class: "form-group mt-4 flex justify-between" },
  ut = { type: "submit", class: "btn btn-primary rounded-full" },
  dt = { class: "mb-8" },
  ht = { class: "flex justify-between items-center mb-4" },
  ct = { class: "text-lg font-semibold" },
  pt = { class: "table-container" },
  mt = { class: "table w-full" },
  ft = ["onClick"],
  gt = ["onClick"],
  bt = { key: 6 },
  vt = { class: "mb-8" },
  yt = { class: "text-lg font-semibold mb-4" },
  wt = { class: "text-lg font-semibold mb-4" },
  St = { class: "table-container" },
  kt = { class: "table w-full" },
  Tt = ["checked", "onChange"],
  Vt = { class: "text-lg font-semibold mb-4" },
  Ot = { class: "flex justify-end mt-4" };
function Pt(e, t, l, u, n, i) {
  const o = x("vue-editor"),
    v = x("multiselect"),
    k = x("Card");
  return (
    d(),
    m("div", ce, [
      n.toast.visible
        ? (d(),
          m(
            "div",
            {
              key: 0,
              class: S(["toast", n.toast.position]),
              style: { zIndex: 9999 },
            },
            [
              s(
                "div",
                { class: S(["alert", n.toast.type, "text-white"]) },
                [s("span", null, a(n.toast.message), 1)],
                2
              ),
            ],
            2
          ))
        : p("", !0),
      h(
        k,
        { topMargin: "mt-8" },
        {
          default: B(() => [
            s("div", pe, [s("h2", me, a(i.translations.settings), 1)]),
            t[46] || (t[46] = s("div", { class: "divider mt-2" }, null, -1)),
            s("div", fe, [
              s("div", ge, [
                s(
                  "a",
                  {
                    class: S([i.tabClass(1), "justify-start w-full"]),
                    onClick: t[0] || (t[0] = (r) => i.selectTab(1)),
                  },
                  [
                    t[30] ||
                      (t[30] = s("i", { class: "fas fa-cog mr-2" }, null, -1)),
                    f(" " + a(i.translations.settings_general), 1),
                  ],
                  2
                ),
                s(
                  "a",
                  {
                    class: S([i.tabClass(2), "justify-start w-full"]),
                    onClick: t[1] || (t[1] = (r) => i.selectTab(2)),
                  },
                  [
                    t[31] ||
                      (t[31] = s(
                        "i",
                        { class: "fas fa-envelope-open-text mr-2" },
                        null,
                        -1
                      )),
                    f(" " + a(i.translations.settings_email), 1),
                  ],
                  2
                ),
                n.emailSettings.adminNotifications
                  ? (d(),
                    m(
                      "a",
                      {
                        key: 0,
                        class: S([i.tabClass(5), "justify-start w-full"]),
                        onClick: t[2] || (t[2] = (r) => i.selectTab(5)),
                      },
                      [
                        t[32] ||
                          (t[32] = s(
                            "i",
                            { class: "fas fa-envelope-open mr-2" },
                            null,
                            -1
                          )),
                        f(" " + a(i.translations.settings_email_admin), 1),
                      ],
                      2
                    ))
                  : p("", !0),
                n.emailSettings.userNotifications
                  ? (d(),
                    m(
                      "a",
                      {
                        key: 1,
                        class: S([i.tabClass(6), "justify-start w-full"]),
                        onClick: t[3] || (t[3] = (r) => i.selectTab(6)),
                      },
                      [
                        t[33] ||
                          (t[33] = s(
                            "i",
                            { class: "fas fa-envelope mr-2" },
                            null,
                            -1
                          )),
                        f(" " + a(i.translations.settings_email_user), 1),
                      ],
                      2
                    ))
                  : p("", !0),
                s(
                  "a",
                  {
                    class: S([i.tabClass(3), "justify-start w-full"]),
                    onClick: t[4] || (t[4] = (r) => i.selectTab(3)),
                  },
                  [
                    t[34] ||
                      (t[34] = s(
                        "i",
                        { class: "fas fa-tasks mr-2" },
                        null,
                        -1
                      )),
                    f(" " + a(i.translations.settings_priorities), 1),
                  ],
                  2
                ),
                s(
                  "a",
                  {
                    class: S([i.tabClass(4), "justify-start w-full"]),
                    onClick: t[5] || (t[5] = (r) => i.selectTab(4)),
                  },
                  [
                    t[35] ||
                      (t[35] = s(
                        "i",
                        { class: "fas fa-user-shield mr-2" },
                        null,
                        -1
                      )),
                    f(" " + a(i.translations.user_roles), 1),
                  ],
                  2
                ),
              ]),
              s("div", be, [
                n.loading
                  ? (d(),
                    m(
                      "div",
                      ve,
                      t[36] ||
                        (t[36] = [
                          s(
                            "span",
                            {
                              class:
                                "loading loading-spinner text-primary loading-lg",
                            },
                            null,
                            -1
                          ),
                        ])
                    ))
                  : p("", !0),
                n.selectedTab === 1
                  ? (d(),
                    m("div", ye, [
                      s("h2", we, a(i.translations.general_settings), 1),
                      s("div", Se, [
                        s(
                          "label",
                          null,
                          a(i.translations.activate_plugin_front),
                          1
                        ),
                        g(
                          s(
                            "input",
                            {
                              type: "checkbox",
                              "onUpdate:modelValue":
                                t[6] ||
                                (t[6] = (r) =>
                                  (n.generalSettings.activatePlugin = r)),
                              class: "wcpa-ui-toggle",
                            },
                            null,
                            512
                          ),
                          [[T, n.generalSettings.activatePlugin]]
                        ),
                      ]),
                      s("div", ke, [
                        s(
                          "label",
                          null,
                          a(i.translations.client_change_status),
                          1
                        ),
                        g(
                          s(
                            "input",
                            {
                              type: "checkbox",
                              "onUpdate:modelValue":
                                t[7] ||
                                (t[7] = (r) =>
                                  (n.generalSettings.clientChangeStatus = r)),
                              class: "wcpa-ui-toggle",
                            },
                            null,
                            512
                          ),
                          [[T, n.generalSettings.clientChangeStatus]]
                        ),
                      ]),
                      s("div", Te, [
                        s(
                          "label",
                          null,
                          a(i.translations.client_delete_ticket),
                          1
                        ),
                        g(
                          s(
                            "input",
                            {
                              type: "checkbox",
                              "onUpdate:modelValue":
                                t[8] ||
                                (t[8] = (r) =>
                                  (n.generalSettings.clientDeleteTicket = r)),
                              class: "wcpa-ui-toggle",
                            },
                            null,
                            512
                          ),
                          [[T, n.generalSettings.clientDeleteTicket]]
                        ),
                      ]),
                      s("div", Ve, [
                        s(
                          "label",
                          null,
                          a(i.translations.activate_maintenance_mode),
                          1
                        ),
                        g(
                          s(
                            "input",
                            {
                              type: "checkbox",
                              "onUpdate:modelValue":
                                t[9] ||
                                (t[9] = (r) =>
                                  (n.generalSettings.maintenanceMode = r)),
                              class: "wcpa-ui-toggle",
                            },
                            null,
                            512
                          ),
                          [[T, n.generalSettings.maintenanceMode]]
                        ),
                      ]),
                      s("div", Oe, [
                        s(
                          "label",
                          Pe,
                          a(i.translations.default_ticket_status),
                          1
                        ),
                        g(
                          s(
                            "select",
                            {
                              "onUpdate:modelValue":
                                t[10] ||
                                (t[10] = (r) =>
                                  (n.generalSettings.defaultStatus = r)),
                              class: "wpit-input input input-bordered",
                            },
                            [
                              s("option", Ee, a(i.translations.new), 1),
                              s("option", _e, a(i.translations.waiting), 1),
                              s("option", Le, a(i.translations.in_progress), 1),
                              s("option", xe, a(i.translations.resolved), 1),
                              s("option", Ce, a(i.translations.closed), 1),
                            ],
                            512
                          ),
                          [[H, n.generalSettings.defaultStatus]]
                        ),
                      ]),
                      s("div", je, [
                        s(
                          "button",
                          {
                            onClick:
                              t[11] ||
                              (t[11] = (...r) =>
                                i.saveGeneralSettings &&
                                i.saveGeneralSettings(...r)),
                            class: "btn btn-primary rounded-full",
                          },
                          [
                            t[37] ||
                              (t[37] = s(
                                "i",
                                { class: "fas fa-save" },
                                null,
                                -1
                              )),
                            f(" " + a(i.translations.save), 1),
                          ]
                        ),
                      ]),
                    ]))
                  : p("", !0),
                n.selectedTab === 2
                  ? (d(),
                    m("div", Be, [
                      s("h2", Ae, a(i.translations.email_customization), 1),
                      s("div", Me, [
                        s(
                          "label",
                          null,
                          a(i.translations.enable_admin_notifications),
                          1
                        ),
                        g(
                          s(
                            "input",
                            {
                              type: "checkbox",
                              "onUpdate:modelValue":
                                t[12] ||
                                (t[12] = (r) =>
                                  (n.emailSettings.adminNotifications = r)),
                              class: "wcpa-ui-toggle",
                            },
                            null,
                            512
                          ),
                          [[T, n.emailSettings.adminNotifications]]
                        ),
                      ]),
                      s("div", Ne, [
                        s(
                          "label",
                          null,
                          a(i.translations.enable_user_notifications),
                          1
                        ),
                        g(
                          s(
                            "input",
                            {
                              type: "checkbox",
                              "onUpdate:modelValue":
                                t[13] ||
                                (t[13] = (r) =>
                                  (n.emailSettings.userNotifications = r)),
                              class: "wcpa-ui-toggle",
                            },
                            null,
                            512
                          ),
                          [[T, n.emailSettings.userNotifications]]
                        ),
                      ]),
                      s("div", De, [
                        s(
                          "button",
                          {
                            onClick:
                              t[14] ||
                              (t[14] = (...r) =>
                                i.saveEmailSettings &&
                                i.saveEmailSettings(...r)),
                            class: "btn btn-primary rounded-full",
                          },
                          [
                            t[38] ||
                              (t[38] = s(
                                "i",
                                { class: "fas fa-save" },
                                null,
                                -1
                              )),
                            f(" " + a(i.translations.save), 1),
                          ]
                        ),
                      ]),
                    ]))
                  : p("", !0),
                n.selectedTab === 5 && n.emailSettings.adminNotifications
                  ? (d(),
                    m("div", Ue, [
                      s("h3", Ie, a(i.translations.admin_email), 1),
                      s("div", Ge, [
                        s(
                          "label",
                          null,
                          a(i.translations.different_admin_email),
                          1
                        ),
                        g(
                          s(
                            "input",
                            {
                              type: "checkbox",
                              "onUpdate:modelValue":
                                t[15] ||
                                (t[15] = (r) =>
                                  (n.emailSettings.useCustomEmail = r)),
                              class: "wcpa-ui-toggle",
                            },
                            null,
                            512
                          ),
                          [[T, n.emailSettings.useCustomEmail]]
                        ),
                      ]),
                      n.emailSettings.useCustomEmail
                        ? (d(),
                          m("div", Fe, [
                            s(
                              "label",
                              He,
                              a(i.translations.notification_email),
                              1
                            ),
                            g(
                              s(
                                "input",
                                {
                                  type: "email",
                                  "onUpdate:modelValue":
                                    t[16] ||
                                    (t[16] = (r) =>
                                      (n.emailSettings.notificationEmail = r)),
                                  class: "wpit-input input input-bordered",
                                },
                                null,
                                512
                              ),
                              [[O, n.emailSettings.notificationEmail]]
                            ),
                          ]))
                        : p("", !0),
                      s("div", We, [
                        s("label", Ke, a(i.translations.email_subject), 1),
                        g(
                          s(
                            "input",
                            {
                              type: "text",
                              "onUpdate:modelValue":
                                t[17] ||
                                (t[17] = (r) =>
                                  (n.emailSettings.adminSubject = r)),
                              class: "wpit-input input input-bordered",
                            },
                            null,
                            512
                          ),
                          [[O, n.emailSettings.adminSubject]]
                        ),
                      ]),
                      s("div", Re, [
                        s("label", Xe, a(i.translations.email_message), 1),
                        s("div", null, [
                          h(
                            o,
                            {
                              modelValue: n.emailSettings.adminBody,
                              "onUpdate:modelValue":
                                t[18] ||
                                (t[18] = (r) =>
                                  (n.emailSettings.adminBody = r)),
                              editorToolbar: n.toolbarOptions,
                            },
                            null,
                            8,
                            ["modelValue", "editorToolbar"]
                          ),
                        ]),
                      ]),
                      s("div", ze, [
                        s(
                          "button",
                          {
                            onClick:
                              t[19] ||
                              (t[19] = (...r) =>
                                i.saveEmailSettings &&
                                i.saveEmailSettings(...r)),
                            class: "btn btn-primary rounded-full",
                          },
                          [
                            t[39] ||
                              (t[39] = s(
                                "i",
                                { class: "fas fa-save" },
                                null,
                                -1
                              )),
                            f(" " + a(i.translations.save), 1),
                          ]
                        ),
                      ]),
                    ]))
                  : p("", !0),
                n.selectedTab === 6 && n.emailSettings.userNotifications
                  ? (d(),
                    m("div", qe, [
                      s("h3", Je, a(i.translations.user_email), 1),
                      s("div", Ye, [
                        s("label", Ze, a(i.translations.email_subject), 1),
                        g(
                          s(
                            "input",
                            {
                              type: "text",
                              "onUpdate:modelValue":
                                t[20] ||
                                (t[20] = (r) =>
                                  (n.emailSettings.userSubject = r)),
                              class: "wpit-input input input-bordered",
                            },
                            null,
                            512
                          ),
                          [[O, n.emailSettings.userSubject]]
                        ),
                      ]),
                      s("div", Qe, [
                        s("label", $e, a(i.translations.email_message), 1),
                        s("div", null, [
                          h(
                            o,
                            {
                              modelValue: n.emailSettings.userBody,
                              "onUpdate:modelValue":
                                t[21] ||
                                (t[21] = (r) => (n.emailSettings.userBody = r)),
                              editorToolbar: n.toolbarOptions,
                            },
                            null,
                            8,
                            ["modelValue", "editorToolbar"]
                          ),
                        ]),
                      ]),
                      s("div", et, [
                        s(
                          "button",
                          {
                            onClick:
                              t[22] ||
                              (t[22] = (...r) =>
                                i.saveEmailSettings &&
                                i.saveEmailSettings(...r)),
                            class: "btn btn-primary rounded-full",
                          },
                          [
                            t[40] ||
                              (t[40] = s(
                                "i",
                                { class: "fas fa-save" },
                                null,
                                -1
                              )),
                            f(" " + a(i.translations.save), 1),
                          ]
                        ),
                      ]),
                    ]))
                  : p("", !0),
                n.selectedTab === 3
                  ? (d(),
                    m("div", tt, [
                      s("h2", st, a(i.translations.priorities), 1),
                      n.showPrioritesModal
                        ? (d(),
                          m("dialog", it, [
                            s("div", lt, [
                              s(
                                "h3",
                                nt,
                                a(
                                  n.editingPriority
                                    ? i.translations.edit_priority
                                    : i.translations.add_priority
                                ),
                                1
                              ),
                              s(
                                "form",
                                {
                                  onSubmit:
                                    t[26] ||
                                    (t[26] = c(
                                      (...r) =>
                                        i.savePriority && i.savePriority(...r),
                                      ["prevent"]
                                    )),
                                },
                                [
                                  s(
                                    "button",
                                    {
                                      class:
                                        "btn btn-sm btn-circle btn-ghost absolute right-2 top-2",
                                      onClick:
                                        t[23] ||
                                        (t[23] = (...r) =>
                                          i.closePriorityModal &&
                                          i.closePriorityModal(...r)),
                                    },
                                    " \u2715 "
                                  ),
                                  s("div", rt, [
                                    s(
                                      "label",
                                      at,
                                      a(i.translations.priority_name),
                                      1
                                    ),
                                    g(
                                      s(
                                        "input",
                                        {
                                          type: "text",
                                          id: "name_priority",
                                          "onUpdate:modelValue":
                                            t[24] ||
                                            (t[24] = (r) =>
                                              (n.priorityForm.name = r)),
                                          class:
                                            "wpit-input input input-bordered w-full",
                                          required: "",
                                        },
                                        null,
                                        512
                                      ),
                                      [[O, n.priorityForm.name]]
                                    ),
                                  ]),
                                  s("div", ot, [
                                    s(
                                      "button",
                                      {
                                        type: "button",
                                        class: "btn btn-secondary rounded-full",
                                        onClick:
                                          t[25] ||
                                          (t[25] = (...r) =>
                                            i.closePriorityModal &&
                                            i.closePriorityModal(...r)),
                                      },
                                      a(i.translations.cancel),
                                      1
                                    ),
                                    s("button", ut, [
                                      t[41] ||
                                        (t[41] = s(
                                          "i",
                                          { class: "fas fa-save" },
                                          null,
                                          -1
                                        )),
                                      f(
                                        " " +
                                          a(
                                            n.editingPriority
                                              ? i.translations.save
                                              : i.translations.add
                                          ),
                                        1
                                      ),
                                    ]),
                                  ]),
                                ],
                                32
                              ),
                            ]),
                          ]))
                        : p("", !0),
                      s("div", dt, [
                        s("div", ht, [
                          s("h3", ct, a(i.translations.priority_methods), 1),
                          s(
                            "button",
                            {
                              class: "btn btn-primary rounded-full",
                              onClick:
                                t[27] ||
                                (t[27] = (...r) =>
                                  i.addPriority && i.addPriority(...r)),
                            },
                            [
                              t[42] ||
                                (t[42] = s(
                                  "i",
                                  { class: "fas fa-plus-circle mr-2" },
                                  null,
                                  -1
                                )),
                              f(a(i.translations.add_method), 1),
                            ]
                          ),
                        ]),
                        s("div", pt, [
                          s("table", mt, [
                            s("thead", null, [
                              s("tr", null, [
                                s("th", null, a(i.translations.id), 1),
                                s("th", null, a(i.translations.name), 1),
                                s("th", null, a(i.translations.actions), 1),
                              ]),
                            ]),
                            s("tbody", null, [
                              (d(!0),
                              m(
                                P,
                                null,
                                E(
                                  n.priorities,
                                  (r) => (
                                    d(),
                                    m("tr", { key: r.id }, [
                                      s("td", null, a(r.id), 1),
                                      s("td", null, a(r.name), 1),
                                      s("td", null, [
                                        s(
                                          "button",
                                          {
                                            class: "p-2 text-secondary",
                                            onClick: (A) =>
                                              i.editPriority(r.id),
                                          },
                                          t[43] ||
                                            (t[43] = [
                                              s(
                                                "i",
                                                { class: "fas fa-edit" },
                                                null,
                                                -1
                                              ),
                                            ]),
                                          8,
                                          ft
                                        ),
                                        s(
                                          "button",
                                          {
                                            class: "p-2 text-error",
                                            onClick: (A) =>
                                              i.deletePriority(r.id),
                                          },
                                          t[44] ||
                                            (t[44] = [
                                              s(
                                                "i",
                                                { class: "fas fa-trash" },
                                                null,
                                                -1
                                              ),
                                            ]),
                                          8,
                                          gt
                                        ),
                                      ]),
                                    ])
                                  )
                                ),
                                128
                              )),
                            ]),
                          ]),
                        ]),
                      ]),
                    ]))
                  : p("", !0),
                n.selectedTab === 4
                  ? (d(),
                    m("div", bt, [
                      s("div", vt, [
                        s("h3", yt, a(i.translations.user_settings), 1),
                        s("h4", wt, a(i.translations.user_roles), 1),
                        s("div", St, [
                          s("table", kt, [
                            s("thead", null, [
                              s("tr", null, [
                                s("th", null, a(i.translations.role), 1),
                                s("th", null, a(i.translations.access), 1),
                              ]),
                            ]),
                            s("tbody", null, [
                              (d(!0),
                              m(
                                P,
                                null,
                                E(
                                  n.roles,
                                  (r) => (
                                    d(),
                                    m("tr", { key: r.name }, [
                                      s("td", null, a(r.label), 1),
                                      s("td", null, [
                                        s(
                                          "input",
                                          {
                                            type: "checkbox",
                                            class: "wcpa-ui-toggle",
                                            checked: r.hasAccess,
                                            onChange: (A) =>
                                              i.toggleRoleAccess(r.name),
                                          },
                                          null,
                                          40,
                                          Tt
                                        ),
                                      ]),
                                    ])
                                  )
                                ),
                                128
                              )),
                            ]),
                          ]),
                        ]),
                      ]),
                      s("div", null, [
                        s("h4", Vt, a(i.translations.select_team_users), 1),
                        s("div", null, [
                          h(
                            v,
                            {
                              modelValue: n.selectedUsers,
                              "onUpdate:modelValue":
                                t[28] || (t[28] = (r) => (n.selectedUsers = r)),
                              options: n.allUsers,
                              multiple: !0,
                              "track-by": "id",
                              label: "name",
                              placeholder: i.translations.select_team_users,
                              class: "w-full",
                            },
                            null,
                            8,
                            ["modelValue", "options", "placeholder"]
                          ),
                        ]),
                      ]),
                      s("div", Ot, [
                        s(
                          "button",
                          {
                            onClick:
                              t[29] ||
                              (t[29] = (...r) =>
                                i.saveUsersSettings &&
                                i.saveUsersSettings(...r)),
                            class: "btn btn-primary rounded-full",
                          },
                          [
                            t[45] ||
                              (t[45] = s(
                                "i",
                                { class: "fas fa-save" },
                                null,
                                -1
                              )),
                            f(" " + a(i.translations.save), 1),
                          ]
                        ),
                      ]),
                    ]))
                  : p("", !0),
              ]),
            ]),
          ]),
          _: 1,
        }
      ),
    ])
  );
}
var Et = U(he, [["render", Pt]]);
function _(e, t) {
  const l = L();
  return (
    (_ = function (u, n) {
      return (u = u - 344), l[u];
    }),
    _(e, t)
  );
}
function L() {
  const e = [
    "7YzSucD",
    "616296IUmlrE",
    "1254112wJOoWo",
    "1602900dPuYXn",
    "31430lRNqHw",
    "1179EaZLYx",
    "2486652mMJFbv",
    "mount",
    "#wbugboard-admin-settings",
    "24mmrfXf",
    "14589LDJtyP",
    "238047XvnPWj",
  ];
  return (
    (L = function () {
      return e;
    }),
    L()
  );
}
const D = _;
(function (e, t) {
  const l = _,
    u = e();
  for (; []; )
    try {
      if (
        parseInt(l(346)) / 1 +
          (-parseInt(l(344)) / 2) * (-parseInt(l(345)) / 3) +
          -parseInt(l(349)) / 4 +
          parseInt(l(350)) / 5 +
          (parseInt(l(353)) / 6) * (parseInt(l(347)) / 7) +
          -parseInt(l(348)) / 8 +
          (-parseInt(l(352)) / 9) * (parseInt(l(351)) / 10) ===
        t
      )
        break;
      u.push(u.shift());
    } catch {
      u.push(u.shift());
    }
})(L, 229127);
const _t = W({ render: () => K(Et) });
_t[D(354)](D(355));
